package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"backend-go/ent"
	"backend-go/graph/model"
	"context"
	"fmt"

	"github.com/google/uuid"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (*model.User, error) {
	// Use upstream mapper to prepare the creation operation
	createQuery := upstreamCreateUserMapper(r.Client, input)

	entUser, err := createQuery.Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to create user: %w", err)
	}

	// Use downstream mapper to convert to GraphQL model
	return downstreamUserMapper(entUser), nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input model.UpdateUserInput) (*model.User, error) {
	// Use upstream mapper to prepare the update operation
	updateQuery, err := upstreamUpdateUserMapper(r.Client, input)
	if err != nil {
		return nil, err
	}

	entUser, err := updateQuery.Save(ctx)
	if err != nil {
		if ent.IsNotFound(err) {
			return nil, fmt.Errorf("user with id %s not found", input.ID)
		}
		return nil, fmt.Errorf("failed to update user: %w", err)
	}

	// Use downstream mapper to convert to GraphQL model
	return downstreamUserMapper(entUser), nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (bool, error) {
	userID, err := uuid.Parse(id)
	if err != nil {
		return false, fmt.Errorf("invalid user ID: %w", err)
	}

	err = r.Client.User.DeleteOneID(userID).Exec(ctx)
	if err != nil {
		if ent.IsNotFound(err) {
			return false, nil // User didn't exist, but that's okay
		}
		return false, fmt.Errorf("failed to delete user: %w", err)
	}

	return true, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	entUsers, err := r.Client.User.Query().
		WithTodos(). // Load todos relationship
		All(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to query users: %w", err)
	}

	// Use downstream mapper to convert to GraphQL models
	users := make([]*model.User, len(entUsers))
	for i, entUser := range entUsers {
		users[i] = downstreamUserMapper(entUser)
	}

	return users, nil
}
