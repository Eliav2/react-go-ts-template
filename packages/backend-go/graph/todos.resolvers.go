package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"backend-go/ent"
	"backend-go/graph/generated"
	"backend-go/graph/model"
	"context"
	"fmt"

	"github.com/google/uuid"
)

// Helper function to convert Ent Todo to GraphQL model
func entTodoToModel(entTodo *ent.Todo) *model.Todo {
	return &model.Todo{
		ID:        entTodo.ID.String(),
		Title:     entTodo.Title,
		Completed: entTodo.Completed,
	}
}

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.CreateTodoInput) (*model.Todo, error) {
	entTodo, err := r.Client.Todo.
		Create().
		SetTitle(input.Title).
		Save(ctx)

	if err != nil {
		return nil, fmt.Errorf("failed to create todo: %w", err)
	}

	return entTodoToModel(entTodo), nil
}

// UpdateTodo is the resolver for the updateTodo field.
func (r *mutationResolver) UpdateTodo(ctx context.Context, input model.UpdateTodoInput) (*model.Todo, error) {
	todoID, err := uuid.Parse(input.ID)
	if err != nil {
		return nil, fmt.Errorf("invalid todo ID: %w", err)
	}

	updateQuery := r.Client.Todo.UpdateOneID(todoID)

	if input.Title != nil {
		updateQuery = updateQuery.SetTitle(*input.Title)
	}
	if input.Done != nil {
		updateQuery = updateQuery.SetCompleted(*input.Done)
	}

	entTodo, err := updateQuery.Save(ctx)
	if err != nil {
		if ent.IsNotFound(err) {
			return nil, fmt.Errorf("todo with id %s not found", input.ID)
		}
		return nil, fmt.Errorf("failed to update todo: %w", err)
	}

	return entTodoToModel(entTodo), nil
}

// DeleteTodo is the resolver for the deleteTodo field.
func (r *mutationResolver) DeleteTodo(ctx context.Context, id string) (bool, error) {
	todoID, err := uuid.Parse(id)
	if err != nil {
		return false, fmt.Errorf("invalid todo ID: %w", err)
	}

	err = r.Client.Todo.DeleteOneID(todoID).Exec(ctx)
	if err != nil {
		if ent.IsNotFound(err) {
			return false, nil // Todo didn't exist, but that's okay
		}
		return false, fmt.Errorf("failed to delete todo: %w", err)
	}

	return true, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	entTodos, err := r.Client.Todo.Query().All(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to query todos: %w", err)
	}

	todos := make([]*model.Todo, len(entTodos))
	for i, entTodo := range entTodos {
		todos[i] = entTodoToModel(entTodo)
	}

	return todos, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
